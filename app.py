import os
import sqlite3
from telebot import TeleBot, types
from transformers import pipeline
from sentence_transformers import SentenceTransformer
import logging
import speech_recognition as sr
from langchain_community.tools import DuckDuckGoSearchResults

from db import *
from model_chat_bot import *

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞
BOT_TOKEN = '7585724889:AAFgjrH1alpJK6HzK99G8KschDM4PIoxMug'
ADMIN_ID = 5849808027
bot = TeleBot(BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
USER_DB_PATH = "businessman.db"
DB_PATH = "qa_database.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()
init_activity_db()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã
MODE_MAIN_MENU = 1
MODE_FREQUENT_QUESTIONS = 2
MODE_ASK_QUESTION = 3

MODE_CHAT_BOT = 88

MODE_OPEN_DB = 10

MODE_QUEST_LEVEL = 101
MODE_QUEST_REGION = 102
MODE_QUEST_SPHERE = 103
MODE_QUEST_SUPPORT = 104
MODE_QUEST_NEW = 105
MODE_QUEST_SIZE = 106
MODE_QUEST = 11

MODE_ADMIN_MAIN_MENU = 4
MODE_ADMIN_DOC = 5
MODE_ADMIN_QA = 6

MODE_ADMIN_DEL_DOC = 7

MODE_ADMIN_UPDATE = 8
MODE_ADMIN_STAT = 9

MODE_CONSULTING = 99

MODE_SUP_TYPE = 200

MODE_SUP_FIN = 201
MODE_SUP_NOTFIN = 202
MODE_SUP_NOTFIN = 202
MODE_SUP_INF = 203
MODE_SUP_ADM = 204

MODE_SUP_LEVEL = 300

MODE_SUP_FED = 301
MODE_SUP_REG = 302
MODE_SUP_MUN = 303

MODE_SUP_GOAL = 400

MODE_SUP_NEW = 401
MODE_SUP_DOWN = 402
MODE_SUP_STAB = 403

#—Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
current_mode = MODE_MAIN_MENU


#—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–∑–Ω–µ—Å–º–µ–Ω–µ
prompt_dict = {
        "stage":"",
        "b2":"",
        "level":"",
        "region":"",
        "sphere":"",
        "size":""
}

#—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏
problem_dict = {
        "type":"",
        "level":"",
        "goal":"",
}



# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã
awaiting_question = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
selected_question = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —á–∞—Å—Ç—ã—Ö



'''# "Qwen/Qwen2.5-1.5B-Instruct"
#model_name = "models/qa_model"
#qa_pipeline = pipeline("text-generation", model=model_name)
sentence_model = SentenceTransformer('paraphrase-MiniLM-L6-v2')
'''
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename="errors.log", level=logging.ERROR)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_command(message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    save_user_info(user_id,chat_id,username,first_name,last_name)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üöÄ –ü–æ–µ—Ö–∞–ª–∏")
    bot.send_message(message.chat.id,
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–∑–Ω–µ—Å-–±–æ—Ç! ü§ñ",
    reply_markup=markup
    )
    help_command(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def help_command(message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –ø—Ä–∏–Ω—è—Ç–æ.
    """
    result =  get_agreement_accepted(message.from_user.id)
    bot.send_message(
        message.chat.id,
        "–ë–∏–∑–Ω–µ—Å-–ù–∞–≤–∏–≥–∞—Ç–æ—Ä AI —Ä–µ–∞–ª–∏–∑—É–µ—Ç:\n"
        "1. –ü–æ–∏—Å–∫ –º–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –í–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.\n"
        "2. –û–±—â–µ–Ω–∏–µ —Å –ß–∞—Ç-–±–æ—Ç–æ–º –ø–æ –±–∏–∑–Ω–µ—Å —Ç–µ–º–∞—Ç–∏–∫–µ.\n"
        "3. –ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å."
    )
    if result and result[0] == 1:
        show_main_menu(message.chat.id)
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_agreement"))
        bot.send_message(
            message.chat.id,
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–Ω—è—Ç—å' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
            reply_markup=markup
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "accept_agreement")
def accept_agreement(call):
    #–æ—Ç–º–µ—Ç–∫–∞ –≤ –ë–î –æ —Å–æ–≥–ª–∞—à–µ–Ω–∏–∏
    set_agreement_accepted(call.from_user.id)
    bot.answer_callback_query(call.id, "–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")
    show_main_menu(call.message.chat.id)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_main_menu(chat_id):
    global current_mode
    if chat_id == ADMIN_ID:
        current_mode = MODE_ADMIN_MAIN_MENU
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "üì´ –†–∞–±–æ—Ç–∞ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏")
        markup.add("‚ûï –†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏", "üî• –†–∞–±–æ—Ç–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏")
        markup.add("üë• –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", "üëÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        current_mode = MODE_MAIN_MENU
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üìù –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É")
        markup.add("üÜò –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "ü§ñ –ë–∏–∑–Ω–µ—Å —á–∞—Ç-–±–æ—Ç")
        markup.add("üîë –ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –ø–æ–¥ –∫–ª—é—á", "üî• –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def admin_statistics(message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    count, avg_rating = get_statistics()
    bot.send_message(
        message.chat.id,
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n"
        f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {count}\n"
        f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {avg_rating}"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def process_voice_message(voice_file):
    recognizer = sr.Recognizer()
    try:
        with sr.AudioFile(voice_file) as source:
            audio = recognizer.record(source)
            text = recognizer.recognize_google(audio, language="ru-RU")
            return text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
'''def process_question(chat_id, question):
    try:
        msg = bot.send_message(chat_id, "–ò—â—É –æ—Ç–≤–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        answer = qa_pipeline(question)[0]["generated_text"]
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_question_to_db(question, answer)
        #bot.delete_message(chat_id=message.chat.id, message_id=msg.message_id)
        bot.delete_message(message.chat.id, msg.message_id)
        bot.send_message(chat_id, f"–û—Ç–≤–µ—Ç:\n{answer}")
        bot.send_message(chat_id, "–û—Ü–µ–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç 1 –¥–æ 4:")
        bot.register_next_step_handler_by_chat_id(chat_id, handle_rating, question, answer)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞.")
        show_main_menu(chat_id)'''

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞
def handle_rating(message, question, answer):
    try:
        rating = int(message.text)
        if 1 <= rating <= 4:
            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")
            set_rating(question,rating)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 4.")
            bot.register_next_step_handler(message, handle_rating, question, answer)
            return
    except ValueError:
        #bot.send_message(message.chat.id, "–ö–Ω–æ–ø–∫–∏ —É–±—Ä–∞–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.", reply_markup=ReplyKeyboardRemove())
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.")
        bot.register_next_step_handler(message, handle_rating, question, answer)

        return
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: {e}")

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(message.chat.id)


# –í—ã–≤–æ–¥ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
def show_frequent_questions(chat_id):
    global current_mode
    current_mode = MODE_FREQUENT_QUESTIONS
    try:
        questions = show_top_5()

        if not questions:
            bot.send_message(chat_id, "–ù–µ—Ç —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
            show_main_menu(chat_id)
        else:
            response = "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
            for idx, (_, question_text) in enumerate(questions, 1):
                response += f"{idx}. {question_text}\n"
            response += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'."
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–ù–∞–∑–∞–¥")
            bot.send_message(chat_id, response, reply_markup=markup)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        show_main_menu(chat_id)


#–∞—Ç—Ä–∏–±—É—Ç—ã –±–∏–∑–Ω–µ—Å–º–µ–Ω–∞
stages = ["–•–æ—á—É –æ—Ç–∫—Ä—ã—Ç—å –±–∏–∑–Ω–µ—Å","–•–æ—á—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å","–•–æ—á—É —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è"]
levels = ["–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π","–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π","–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π"]
b2 = ["B2B","B2C","B2G"]
sizes = ["–ú–∏–∫—Ä–æ","–ú–∞–ª—ã–π","–°—Ä–µ–¥–Ω–∏–π","–ö—Ä—É–ø–Ω—ã–π"]

#–∞—Ç—Ä–∏–±—É—Ç—ã –º–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏
types_ch = ["–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è","–ù–µ—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è","–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è","–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è"]
provids = ["–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π","–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π","–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π"]
goals = ["–†–∞–∑–≤–∏—Ç–∏–µ –Ω–æ–≤—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π","–°–Ω–∏–∂–µ–Ω–∏–µ –∏–∑–¥–µ—Ä–∂–µ–∫","–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –≤ –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö"]

types_ch_f = ["–ì—Ä–∞–Ω—Ç—ã","–°—É–±—Å–∏–¥–∏–∏","–õ—å–≥–æ—Ç–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã –∏ –∑–∞–π–º—ã","–ù–∞–ª–æ–≥–æ–≤—ã–µ –ª—å–≥–æ—Ç—ã –∏ –∫–∞–Ω–∏–∫—É–ª—ã"]
types_ch_n = ["–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã","–ë–∏–∑–Ω–µ—Å-–∞–∫—Å–µ–ª–µ—Ä–∞—Ç–æ—Ä—ã –∏ –∏–Ω–∫—É–±–∞—Ç–æ—Ä—ã","–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª—å–≥–æ—Ç–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã","–ü–æ–∏—Å–∫ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤"]
types_ch_i = ["–î–æ—Å—Ç—É–ø –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö","–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É","–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä—É–º–æ–≤ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"]
types_ch_a = ["–ü–æ—Ü–µ–¥—É—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏","–õ–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global current_mode

    if message.text == "–ù–∞–∑–∞–¥":
        show_main_menu(message.chat.id)
        return

    if current_mode == MODE_MAIN_MENU:

            
        if message.text == "üîë –ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –ø–æ–¥ –∫–ª—é—á":
            #model_anser= get_user_dialog(prompt_dict, "no q", "business_plan")
            
            bot.send_message(message.chat.id, get_user_dialog(prompt_dict, "no q", "business_plan"))
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–ù–∞–∑–∞–¥")
            bot.send_message(message.chat.id, "–†–∞–¥—É–π—Ç–µ—Å—å!", reply_markup=markup)
            current_mode = MODE_ADMIN_MAIN_MENU

        elif message.text == "üÜò –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏":
            bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –í–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞:")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for ts in types_ch:
                markup.add(ts)
            markup.add("–ù–∞–∑–∞–¥")
            bot.send_message(message.chat.id, "üë• –û–ø—Ä–µ–¥–µ–ª–∏–º —Ç–∏–ø –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º:", reply_markup=markup)
            current_mode = MODE_SUP_TYPE



        elif message.text == "ü§ñ –ë–∏–∑–Ω–µ—Å —á–∞—Ç-–±–æ—Ç":
            
            bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —è –ë–∏–∑–Ω–µ—Å –ß–∞—Ç-–ë–æ—Ç (–µ—Å–ª–∏ —É—Å—Ç–∞–ª–∏ —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è –Ω–∞–∂–º–∏—Ç–µ -–ù–∞–∑–∞–¥-):")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–ù–∞–∑–∞–¥")
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)
            current_mode = MODE_CHAT_BOT


        elif message.text == "üìù –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É":
            bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –Ω–∞—à–∏ –æ—Ç–≤–µ—Ç—ã, –ø—Ä–æ–π–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É:")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–•–æ—á—É –æ—Ç–∫—Ä—ã—Ç—å –±–∏–∑–Ω–µ—Å")
            markup.add("–•–æ—á—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å")
            markup.add("–•–æ—á—É —Ä–∞—Å—à–∏—Ä—è—Ç—å –±–∏–∑–Ω–µ—Å")
            markup.add("–ù–∞–∑–∞–¥")
            bot.send_message(message.chat.id, "üë• –û—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–π—Ç–µ —Å—Ç–∞–¥–∏—é –í–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞:", reply_markup=markup)
            current_mode = MODE_OPEN_DB

        elif message.text == "üî• –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
            show_frequent_questions(message.chat.id)
            #current_mode = MODE_FREQUENT_QUESTIONS

    elif current_mode == MODE_SUP_TYPE:

        if message.text == "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for i in types_ch_f:
                markup.add("‚úÖ "+i)
            markup.add("–ù–∞–∑–∞–¥")
            bot.send_message(message.chat.id, "üë• –ö–æ–Ω–∫—Ä–µ—Ç–∏–∑–∏—Ä—É–π—Ç–µ:", reply_markup=markup)
            current_mode = MODE_SUP_FIN
        elif message.text == "–ù–µ—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for i in types_ch_n:
                markup.add("‚úÖ "+i)
            markup.add("–ù–∞–∑–∞–¥")
            bot.send_message(message.chat.id, "üë• –ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=markup)
            current_mode = MODE_SUP_NOTFIN
        elif message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for i in types_ch_i:
                markup.add("‚úÖ "+i)
            markup.add("–ù–∞–∑–∞–¥")
            bot.send_message(message.chat.id, "üë• –ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=markup)
            current_mode = MODE_SUP_INF
        elif message.text == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for i in types_ch_a:
                markup.add("‚úÖ "+i)
            markup.add("–ù–∞–∑–∞–¥")
            bot.send_message(message.chat.id, "üë• –ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=markup)
            current_mode = MODE_SUP_ADM

    elif current_mode == MODE_SUP_FIN:
        if message.text in types_ch_f:
            problem_dict["type"] = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in provids:
            markup.add("‚úÖ "+i)
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üë• –ö–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=markup)
        current_mode = MODE_SUP_GOAL

    elif current_mode == MODE_SUP_NOTFIN:
        if message.text in types_ch_n:
            problem_dict["type"] = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in provids:
            markup.add("‚úÖ "+i)
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üë• –ö–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=markup)
        current_mode = MODE_SUP_GOAL

    elif current_mode == MODE_SUP_ADM:
        if message.text in types_ch_a:
            problem_dict["type"] = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in provids:
            markup.add("‚úÖ "+i)
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üë• –ö–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=markup)
        current_mode = MODE_SUP_GOAL

    elif current_mode == MODE_SUP_INF:
        if message.text in types_ch_i:
            problem_dict["type"] = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in provids:
            markup.add("‚úÖ "+i)
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üë• –ö–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=markup)
        current_mode = MODE_SUP_GOAL


    elif current_mode == MODE_SUP_GOAL:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if message.text in provids:
            problem_dict["level"] = message.text
        for i in goals:
            markup.add("‚úÖ "+i)
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "ü•á –° –∫–∞–∫–æ–π —Ü–µ–ª—å—é:", reply_markup=markup)
        current_mode = MODE_SUP_NEW

    elif current_mode == MODE_SUP_NEW:
        if message.text in goals:
            problem_dict["goal"] = message.text
        
        bot.send_message(message.chat.id, get_user_dialog(prompt_dict, str(problem_dict), "no sense"))
        bot.send_message(message.chat.id, f"‚ùóÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã:")
        search = DuckDuckGoSearchResults(output_format="list")
        prompt_qa = f"{problem_dict['type']} –Ω–∞ {problem_dict['level'] } —É—Ä–æ–≤–Ω–µ –¥–ª—è {problem_dict['goal']}"
        link_list = search.invoke(prompt_qa)
        links = [item['link'] for item in link_list]
        message_str = ""
        for i, link in enumerate(links, start=1):
            message_str += f"{i}. {link}\n"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, message_str, reply_markup=markup)
        current_mode = MODE_MAIN_MENU

    elif current_mode == MODE_CHAT_BOT:
        model_anser= get_user_dialog(prompt_dict, message.text, "no sense")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, model_anser)
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã..", reply_markup=markup)

    elif current_mode == MODE_OPEN_DB:
        if message.text in stages:
            prompt_dict["stage"] = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("B2B")
        markup.add("B2C")
        markup.add("B2G")
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üë• –§–æ—Ä–º–∞—Ç –í–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞:", reply_markup=markup)
        current_mode = MODE_QUEST_SIZE

    elif current_mode == MODE_QUEST_SIZE:
        if message.text in b2:
            prompt_dict["b2"] = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ú–∏–∫—Ä–æ")
        markup.add("–ú–∞–ª—ã–π")
        markup.add("–°—Ä–µ–¥–Ω–∏–π")
        markup.add("–ö—Ä—É–ø–Ω—ã–π")
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "‚≠êÔ∏è –ú–∞—Å—à—Ç–∞–± –í–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞:", reply_markup=markup)
        current_mode = MODE_QUEST_SUPPORT


    elif current_mode == MODE_QUEST_SUPPORT:
        if message.text in sizes:
            prompt_dict["size"] = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π")
        markup.add("–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π")
        markup.add("–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π")
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üåé –†–∞–∑–º–∞—Ö –í–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞:", reply_markup=markup)
        current_mode = MODE_QUEST_REGION


    elif current_mode == MODE_QUEST_REGION:

        if message.text in levels:
            prompt_dict["level"] = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üë• –í –∫–∞–∫–æ–º —Ä–µ–≥–∏–æ–Ω–µ –í–∞—à –±–∏–∑–Ω–µ—Å?\n(–µ—Å–ª–∏ –Ω–µ–≤–∞–∂–Ω–æ –Ω–∞–∂–º–∏—Ç–µ -–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å-):", reply_markup=markup)
        current_mode = MODE_QUEST_SPHERE

    elif current_mode == MODE_QUEST_SPHERE:
        if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            prompt_dict["region"] = "–†–æ—Å—Å–∏—è"
        else:
            prompt_dict["region"] = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üë• –í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ (–æ—Ç—Ä–∞—Å–ª–∏) –í–∞—à –±–∏–∑–Ω–µ—Å?\n(–µ—Å–ª–∏ –Ω–µ–≤–∞–∂–Ω–æ –Ω–∞–∂–º–∏—Ç–µ -–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å-):", reply_markup=markup)
        current_mode = MODE_QUEST_NEW

    elif current_mode == MODE_QUEST_NEW:
        if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            prompt_dict["sphere"] = "–õ—é–±–∞—è"
        else:
            prompt_dict["sphere"] = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, f"{ get_user_dialog(prompt_dict, str(prompt_dict), 'no sense')}", reply_markup=markup)
        save_businessman_data(message.chat.id, prompt_dict)
        bot.send_message(message.chat.id, "üë• –°–ø–∞—Å–∏–±–æ, –º—ã –±—É–¥–µ–º —É—á–∏—Ç—ã–≤–∞—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –í–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.", reply_markup=markup)



    elif current_mode == MODE_FREQUENT_QUESTIONS:
        if message.text.isdigit():
            question_number = int(message.text) - 1
            questions = get_questions()

            if 0 <= question_number < len(questions):
                _, answer = questions[question_number]
                bot.send_message(message.chat.id, f"–û—Ç–≤–µ—Ç:\n{answer}")
                show_main_menu(message.chat.id)
            else:
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.")

    elif current_mode == MODE_ASK_QUESTION:
        bot.send_message(message.chat.id, "–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'!")

    elif current_mode == MODE_ADMIN_MAIN_MENU:
        if message.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
            admin_statistics(message)

        elif message.text == "üë• –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–ù–∞–∑–∞–¥")
            bot.send_message(message.chat.id, str(admin_panel_user()), reply_markup=markup)

        elif message.text == "‚ûï –†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏":
            current_mode = MODE_ADMIN_DOC
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üìÅ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
            markup.add("üìä –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
            markup.add("‚ûï –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
            markup.add("–ù–∞–∑–∞–¥")
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

        elif message.text == "üî• –†–∞–±–æ—Ç–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏":
            current_mode = MODE_ADMIN_QA
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üìä –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
            markup.add("–ù–∞–∑–∞–¥")
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    


    elif current_mode == MODE_ADMIN_DOC:
        if message.text == "üìÅ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö":
            files = [f for f in os.listdir(DATA_FOLDER) if f.endswith('.pdf')]
            if files:
                numbered_files = "\n".join(f"{i + 1}. {file}" for i, file in enumerate(files))
                bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n" + numbered_files)
            else:
                bot.send_message(message.chat.id, "–î–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ø–∞–ø–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

        elif message.text == "üìä –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç":
            bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç .pdf.")

        elif message.text == "‚ûï –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç":
            files = [f for f in os.listdir(DATA_FOLDER) if f.endswith('.pdf')]
            if files:
                bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n" + "\n".join(files))

            else:
                bot.send_message(message.chat.id, "–î–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ø–∞–ø–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                show_main_menu(message.chat.id)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            current_mode = MODE_ADMIN_DEL_DOC
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–ù–∞–∑–∞–¥")
            bot.send_message(message.chat.id, text=None, reply_markup=markup)
    
    elif current_mode == MODE_ADMIN_DEL_DOC:
        if message.text.isdigit():
            question_number = int(message.text)
            delete_pdf_by_number(question_number)# return result str
        




    elif current_mode == MODE_ADMIN_QA:
        pass


@bot.message_handler(content_types=['document'])
def handle_uploaded_document(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.
    """
    if message.chat.id == ADMIN_ID:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_path = os.path.join(DATA_FOLDER, message.document.file_name)
        with open(file_path, 'wb') as f:
            f.write(downloaded_file)
        bot.send_message(message.chat.id, f"–î–æ–∫—É–º–µ–Ω—Ç {message.document.file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    else:
        bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å)
'''@bot.message_handler(content_types=["voice"])
def handle_new_question(message):
        voice_file = bot.download_file(bot.get_file(message.voice.file_id).file_path)
        question = process_voice_message(voice_file)
        if question:
            process_question(message.chat.id, question)
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            show_main_menu(message.chat.id)
'''

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def start_bot():
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            time.sleep(5)

if __name__ == "__main__":
    print("now")
    start_bot()